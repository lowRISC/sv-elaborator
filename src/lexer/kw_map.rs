use std::collections::HashMap;
use super::kw::Keyword;

lazy_static!{
pub static ref HASHMAP: HashMap<&'static str, (Keyword, u8)> = {
    let mut m = HashMap::new();

    // Verilog 95
    m.insert("always", (Keyword::Always, 1));
    m.insert("and", (Keyword::And, 1));
    m.insert("assign", (Keyword::Assign, 1));
    m.insert("begin", (Keyword::Begin, 1));
    m.insert("buf", (Keyword::Buf, 1));
    m.insert("bufif0", (Keyword::Bufif0, 1));
    m.insert("bufif1", (Keyword::Bufif1, 1));
    m.insert("case", (Keyword::Case, 1));
    m.insert("casex", (Keyword::Casex, 1));
    m.insert("casez", (Keyword::Casez, 1));
    m.insert("cmos", (Keyword::Cmos, 1));
    m.insert("deassign", (Keyword::Deassign, 1));
    m.insert("default", (Keyword::Default, 1));
    m.insert("defparam", (Keyword::Defparam, 1));
    m.insert("disable", (Keyword::Disable, 1));
    m.insert("edge", (Keyword::Edge, 1));
    m.insert("else", (Keyword::Else, 1));
    m.insert("end", (Keyword::End, 1));
    m.insert("endcase", (Keyword::Endcase, 1));
    m.insert("endmodule", (Keyword::Endmodule, 1));
    m.insert("endfunction", (Keyword::Endfunction, 1));
    m.insert("endprimitive", (Keyword::Endprimitive, 1));
    m.insert("endspecify", (Keyword::Endspecify, 1));
    m.insert("endtable", (Keyword::Endtable, 1));
    m.insert("endtask", (Keyword::Endtask, 1));
    m.insert("event", (Keyword::Event, 1));
    m.insert("for", (Keyword::For, 1));
    m.insert("force", (Keyword::Force, 1));
    m.insert("forever", (Keyword::Forever, 1));
    m.insert("fork", (Keyword::Fork, 1));
    m.insert("function", (Keyword::Function, 1));
    m.insert("highz0", (Keyword::Highz0, 1));
    m.insert("highz1", (Keyword::Highz1, 1));
    m.insert("if", (Keyword::If, 1));
    m.insert("ifnone", (Keyword::Ifnone, 1));
    m.insert("initial", (Keyword::Initial, 1));
    m.insert("inout", (Keyword::Inout, 1));
    m.insert("input", (Keyword::Input, 1));
    m.insert("integer", (Keyword::Integer, 1));
    m.insert("join", (Keyword::Join, 1));
    m.insert("large", (Keyword::Large, 1));
    m.insert("macromodule", (Keyword::Macromodule, 1));
    m.insert("medium", (Keyword::Medium, 1));
    m.insert("module", (Keyword::Module, 1));
    m.insert("nand", (Keyword::Nand, 1));
    m.insert("negedge", (Keyword::Negedge, 1));
    m.insert("nmos", (Keyword::Nmos, 1));
    m.insert("nor", (Keyword::Nor, 1));
    m.insert("not", (Keyword::Not, 1));
    m.insert("notif0", (Keyword::Notif0, 1));
    m.insert("notif1", (Keyword::Notif1, 1));
    m.insert("or", (Keyword::Or, 1));
    m.insert("output", (Keyword::Output, 1));
    m.insert("parameter", (Keyword::Parameter, 1));
    m.insert("pmos", (Keyword::Pmos, 1));
    m.insert("posedge", (Keyword::Posedge, 1));
    m.insert("primitive", (Keyword::Primitive, 1));
    m.insert("pull0", (Keyword::Pull0, 1));
    m.insert("pull1", (Keyword::Pull1, 1));
    m.insert("pullup", (Keyword::Pullup, 1));
    m.insert("pulldown", (Keyword::Pulldown, 1));
    m.insert("rcmos", (Keyword::Rcmos, 1));
    m.insert("real", (Keyword::Real, 1));
    m.insert("realtime", (Keyword::Realtime, 1));
    m.insert("reg", (Keyword::Reg, 1));
    m.insert("release", (Keyword::Release, 1));
    m.insert("repeat", (Keyword::Repeat, 1));
    m.insert("rnmos", (Keyword::Rnmos, 1));
    m.insert("rpmos", (Keyword::Rpmos, 1));
    m.insert("rtran", (Keyword::Rtran, 1));
    m.insert("rtranif0", (Keyword::Rtranif0, 1));
    m.insert("rtranif1", (Keyword::Rtranif1, 1));
    m.insert("scalared", (Keyword::Scalared, 1));
    m.insert("small", (Keyword::Small, 1));
    m.insert("specify", (Keyword::Specify, 1));
    m.insert("specparam", (Keyword::Specparam, 1));
    m.insert("strong0", (Keyword::Strong0, 1));
    m.insert("strong1", (Keyword::Strong1, 1));
    m.insert("supply0", (Keyword::Supply0, 1));
    m.insert("supply1", (Keyword::Supply1, 1));
    m.insert("table", (Keyword::Table, 1));
    m.insert("task", (Keyword::Task, 1));
    m.insert("time", (Keyword::Time, 1));
    m.insert("tran", (Keyword::Tran, 1));
    m.insert("tranif0", (Keyword::Tranif0, 1));
    m.insert("tranif1", (Keyword::Tranif1, 1));
    m.insert("tri", (Keyword::Tri, 1));
    m.insert("tri0", (Keyword::Tri0, 1));
    m.insert("tri1", (Keyword::Tri1, 1));
    m.insert("triand", (Keyword::Triand, 1));
    m.insert("trior", (Keyword::Trior, 1));
    m.insert("trireg", (Keyword::Trireg, 1));
    m.insert("vectored", (Keyword::Vectored, 1));
    m.insert("wait", (Keyword::Wait, 1));
    m.insert("wand", (Keyword::Wand, 1));
    m.insert("weak0", (Keyword::Weak0, 1));
    m.insert("weak1", (Keyword::Weak1, 1));
    m.insert("while", (Keyword::While, 1));
    m.insert("wire", (Keyword::Wire, 1));
    m.insert("wor", (Keyword::Wor, 1));
    m.insert("xnor", (Keyword::Xnor, 1));
    m.insert("xor", (Keyword::Xor, 1));

    // Verilog 01-noconfig
    m.insert("automatic", (Keyword::Automatic, 2));
    m.insert("endgenerate", (Keyword::Endgenerate, 2));
    m.insert("generate", (Keyword::Generate, 2));
    m.insert("genvar", (Keyword::Genvar, 2));
    m.insert("localparam", (Keyword::Localparam, 2));
    m.insert("noshowcancelled", (Keyword::Noshowcancelled, 2));
    m.insert("pulsestyle_ondetect", (Keyword::PulsestyleOndetect, 2));
    m.insert("pulsestyle_onevent", (Keyword::PulsestyleOnevent, 2));
    m.insert("showcancelled", (Keyword::Showcancelled, 2));
    m.insert("signed", (Keyword::Signed, 2));
    m.insert("unsigned", (Keyword::Unsigned, 2));

    // Verilog 01
    m.insert("cell", (Keyword::Cell, 3));
    m.insert("config", (Keyword::Config, 3));
    m.insert("design", (Keyword::Design, 3));
    m.insert("endconfig", (Keyword::Endconfig, 3));
    m.insert("incdir", (Keyword::Incdir, 3));
    m.insert("include", (Keyword::Include, 3));
    m.insert("instance", (Keyword::Instance, 3));
    m.insert("liblist", (Keyword::Liblist, 3));
    m.insert("library", (Keyword::Library, 3));
    m.insert("use", (Keyword::Use, 3));

    // Verilog 05
    m.insert("uwire", (Keyword::Uwire, 4));

    // SV 05
    m.insert("alias", (Keyword::Alias, 5));
    m.insert("always_comb", (Keyword::AlwaysComb, 5));
    m.insert("always_ff", (Keyword::AlwaysFf, 5));
    m.insert("always_latch", (Keyword::AlwaysLatch, 5));
    m.insert("assert", (Keyword::Assert, 5));
    m.insert("assume", (Keyword::Assume, 5));
    m.insert("before", (Keyword::Before, 5));
    m.insert("bind", (Keyword::Bind, 5));
    m.insert("bins", (Keyword::Bins, 5));
    m.insert("binsof", (Keyword::Binsof, 5));
    m.insert("bit", (Keyword::Bit, 5));
    m.insert("break", (Keyword::Break, 5));
    m.insert("byte", (Keyword::Byte, 5));
    m.insert("chandle", (Keyword::Chandle, 5));
    m.insert("class", (Keyword::Class, 5));
    m.insert("clocking", (Keyword::Clocking, 5));
    m.insert("const", (Keyword::Const, 5));
    m.insert("constraint", (Keyword::Constraint, 5));
    m.insert("context", (Keyword::Context, 5));
    m.insert("continue", (Keyword::Continue, 5));
    m.insert("cover", (Keyword::Cover, 5));
    m.insert("covergroup", (Keyword::Covergroup, 5));
    m.insert("coverpoint", (Keyword::Coverpoint, 5));
    m.insert("cross", (Keyword::Cross, 5));
    m.insert("dist", (Keyword::Dist, 5));
    m.insert("do", (Keyword::Do, 5));
    m.insert("endclass", (Keyword::Endclass, 5));
    m.insert("endclocking", (Keyword::Endclocking, 5));
    m.insert("endgroup", (Keyword::Endgroup, 5));
    m.insert("endinterface", (Keyword::Endinterface, 5));
    m.insert("endpackage", (Keyword::Endpackage, 5));
    m.insert("endprogram", (Keyword::Endprogram, 5));
    m.insert("endproperty", (Keyword::Endproperty, 5));
    m.insert("endsequence", (Keyword::Endsequence, 5));
    m.insert("enum", (Keyword::Enum, 5));
    m.insert("expect", (Keyword::Expect, 5));
    m.insert("export", (Keyword::Export, 5));
    m.insert("extends", (Keyword::Extends, 5));
    m.insert("extern", (Keyword::Extern, 5));
    m.insert("final", (Keyword::Final, 5));
    m.insert("first_match", (Keyword::FirstMatch, 5));
    m.insert("foreach", (Keyword::Foreach, 5));
    m.insert("forkjoin", (Keyword::Forkjoin, 5));
    m.insert("iff", (Keyword::Iff, 5));
    m.insert("ignore_bins", (Keyword::IgnoreBins, 5));
    m.insert("illegal_bins", (Keyword::IllegalBins, 5));
    m.insert("import", (Keyword::Import, 5));
    m.insert("inside", (Keyword::Inside, 5));
    m.insert("int", (Keyword::Int, 5));
    m.insert("interface", (Keyword::Interface, 5));
    m.insert("intersect", (Keyword::Intersect, 5));
    m.insert("join_any", (Keyword::JoinAny, 5));
    m.insert("join_none", (Keyword::JoinNone, 5));
    m.insert("local", (Keyword::Local, 5));
    m.insert("logic", (Keyword::Logic, 5));
    m.insert("longint", (Keyword::Longint, 5));
    m.insert("matches", (Keyword::Matches, 5));
    m.insert("modport", (Keyword::Modport, 5));
    m.insert("new", (Keyword::New, 5));
    m.insert("null", (Keyword::Null, 5));
    m.insert("package", (Keyword::Package, 5));
    m.insert("packed", (Keyword::Packed, 5));
    m.insert("priority", (Keyword::Priority, 5));
    m.insert("program", (Keyword::Program, 5));
    m.insert("property", (Keyword::Property, 5));
    m.insert("protected", (Keyword::Protected, 5));
    m.insert("pure", (Keyword::Pure, 5));
    m.insert("rand", (Keyword::Rand, 5));
    m.insert("randc", (Keyword::Randc, 5));
    m.insert("randcase", (Keyword::Randcase, 5));
    m.insert("randsequence", (Keyword::Randsequence, 5));
    m.insert("ref", (Keyword::Ref, 5));
    m.insert("return", (Keyword::Return, 5));
    m.insert("sequence", (Keyword::Sequence, 5));
    m.insert("shortint", (Keyword::Shortint, 5));
    m.insert("shortreal", (Keyword::Shortreal, 5));
    m.insert("solve", (Keyword::Solve, 5));
    m.insert("static", (Keyword::Static, 5));
    m.insert("string", (Keyword::String, 5));
    m.insert("struct", (Keyword::Struct, 5));
    m.insert("super", (Keyword::Super, 5));
    m.insert("tagged", (Keyword::Tagged, 5));
    m.insert("this", (Keyword::This, 5));
    m.insert("throughout", (Keyword::Throughout, 5));
    m.insert("timeprecision", (Keyword::Timeprecision, 5));
    m.insert("timeunit", (Keyword::Timeunit, 5));
    m.insert("type", (Keyword::Type, 5));
    m.insert("typedef", (Keyword::Typedef, 5));
    m.insert("union", (Keyword::Union, 5));
    m.insert("unique", (Keyword::Unique, 5));
    m.insert("var", (Keyword::Var, 5));
    m.insert("virtual", (Keyword::Virtual, 5));
    m.insert("void", (Keyword::Void, 5));
    m.insert("wait_order", (Keyword::WaitOrder, 5));
    m.insert("wildcard", (Keyword::Wildcard, 5));
    m.insert("with", (Keyword::With, 5));
    m.insert("within", (Keyword::Within, 5));

    // SV 09
    m.insert("accept_on", (Keyword::AcceptOn, 6));
    m.insert("checker", (Keyword::Checker, 6));
    m.insert("endchecker", (Keyword::Endchecker, 6));
    m.insert("eventually", (Keyword::Eventually, 6));
    m.insert("global", (Keyword::Global, 6));
    m.insert("implies", (Keyword::Implies, 6));
    m.insert("let", (Keyword::Let, 6));
    m.insert("nexttime", (Keyword::Nexttime, 6));
    m.insert("reject_on", (Keyword::RejectOn, 6));
    m.insert("restrict", (Keyword::Restrict, 6));
    m.insert("s_always", (Keyword::SAlways, 6));
    m.insert("s_eventually", (Keyword::SEventually, 6));
    m.insert("s_nexttime", (Keyword::SNexttime, 6));
    m.insert("s_until", (Keyword::SUntil, 6));
    m.insert("s_until_with", (Keyword::SUntilWith, 6));
    m.insert("strong", (Keyword::Strong, 6));
    m.insert("sync_accept_on", (Keyword::SyncAcceptOn, 6));
    m.insert("sync_reject_on", (Keyword::SyncRejectOn, 6));
    m.insert("unique0", (Keyword::Unique0, 6));
    m.insert("until", (Keyword::Until, 6));
    m.insert("until_with", (Keyword::UntilWith, 6));
    m.insert("untyped", (Keyword::Untyped, 6));
    m.insert("weak", (Keyword::Weak, 6));

    // SV 12
    m.insert("implements", (Keyword::Implements, 7));
    m.insert("interconnect", (Keyword::Interconnect, 7));
    m.insert("nettype", (Keyword::Nettype, 7));
    m.insert("soft", (Keyword::Soft, 7));

    m
};
}
